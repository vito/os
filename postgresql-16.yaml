package:
  name: postgresql-16
  version: "16.2"
  epoch: 10
  description: A sophisticated object-relational DBMS
  copyright:
    - license: BSD-3-Clause
  dependencies:
    provides:
      - postgresql=${{package.full-version}}
    runtime:
      - ${{package.name}}-base=${{package.full-version}}

environment:
  environment:
    # Used to fetch docker scripts
    ALPINE_VERSION: "3.19"
  contents:
    packages:
      - autoconf
      - automake
      - bash
      - bison
      - build-base
      - busybox
      - ca-certificates-bundle
      - curl
      - execline-dev
      - flex
      - icu-dev
      - libedit-dev
      - libxml2-dev
      - net-tools
      - openssl-dev
      - util-linux-dev
      - zlib-dev

var-transforms:
  - from: ${{package.name}}
    match: '-'
    replace: ''
    to: mangled-package-name

pipeline:
  - uses: fetch
    with:
      expected-sha256: 2b8201047ec81acd1bad29dba278d788e7891b9c3e8232eda16bb29dec8131c7
      uri: https://ftp.postgresql.org/pub/source/v${{package.version}}/postgresql-${{package.version}}.tar.gz

  - uses: patch
    with:
      patches: |
        per-version-dirs.patch

  - uses: autoconf/configure
    with:
      opts: |
        --bindir=/usr/libexec/${{vars.mangled-package-name}} \
        --datadir=/usr/share/${{vars.mangled-package-name}} \
        --docdir=/usr/share/doc/${{vars.mangled-package-name}} \
        --mandir=/usr/share/${{vars.mangled-package-name}}/man \
        --with-openssl \
        --with-libedit-preferred \
        --with-uuid=e2fs

  - uses: autoconf/make

  - uses: autoconf/make-install

  - runs: |
      # Symlink postgres to /usr/bin
      mkdir -p ${{targets.destdir}}/usr/bin
      ln -sf /usr/libexec/${{vars.mangled-package-name}}/postgres ${{targets.destdir}}/usr/bin/postgres16

      # the official postgres image listens on all interfaces by default, let's do the same for consistency
      sed -ri "s!^#?(listen_addresses)\s*=\s*\S+.*!\1 = '*'!" ${{targets.destdir}}/usr/share/${{vars.mangled-package-name}}/postgresql.conf.sample
      grep -F "listen_addresses = '*'" ${{targets.destdir}}/usr/share/${{vars.mangled-package-name}}/postgresql.conf.sample

  - uses: strip

data:
  - name: client-tools
    items:
      clusterdb: ""
      createdb: ""
      createuser: ""
      dropdb: ""
      dropuser: ""
      pg_amcheck: ""
      pg_basebackup: ""
      pg_dump: ""
      pg_dumpall: ""
      pg_isready: ""
      pg_receivewal: ""
      pg_recvlogical: ""
      pg_restore: ""
      pg_verifybackup: ""
      psql: ""
      reindexdb: ""
      vacuumdb: ""

subpackages:
  - name: ${{package.name}}-dev
    pipeline:
      - uses: split/dev
    dependencies:
      provides:
        - postgresql-dev=${{package.full-version}}
      runtime:
        - ${{package.name}}
        - openssl-dev
        - ${{package.name}}-client
        - libpq-16
    description: postgresql dev

  - name: ${{package.name}}-client-base
    description: PostgreSQL client base
    range: client-tools
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/libexec/${{vars.mangled-package-name}}
          mv ${{targets.destdir}}/usr/libexec/${{vars.mangled-package-name}}/${{range.key}} ${{targets.subpkgdir}}/usr/libexec/${{vars.mangled-package-name}}/${{range.key}}

  - name: ${{package.name}}-client
    description: PostgreSQL client
    dependencies:
      runtime:
        - ${{package.name}}-client-base=${{package.full-version}}
      provides:
        - postgresql-client=${{package.full-version}}
    range: client-tools
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          ln -sf /usr/libexec/${{vars.mangled-package-name}}/${{range.key}} ${{targets.subpkgdir}}/usr/bin/${{range.key}}

  - name: ${{package.name}}-contrib
    dependencies:
      provides:
        - postgresql-contrib=${{package.full-version}}
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}
          make DESTDIR=${{targets.subpkgdir}} -C contrib install
    description: Extension modules distributed with PostgreSQL

  - name: libpq-16
    description: PostgreSQL libraries
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/lib
          mv ${{targets.destdir}}/usr/lib/libpq.so* ${{targets.subpkgdir}}/usr/lib/
    dependencies:
      provider-priority: 16
      provides:
        - libpq=${{package.full-version}}

  - name: libecpg-16
    description: Embedded PostgreSQL libraries
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/lib
          mv ${{targets.destdir}}/usr/lib/libecpg.so* ${{targets.subpkgdir}}/usr/lib/
          mv ${{targets.destdir}}/usr/lib/libecpg_compat.so* ${{targets.subpkgdir}}/usr/lib/
          mv ${{targets.destdir}}/usr/lib/libpgtypes.so* ${{targets.subpkgdir}}/usr/lib/
    dependencies:
      provider-priority: 16
      provides:
        - libecpg=${{package.full-version}}

  - name: ${{package.name}}-oci-entrypoint-base
    description: Base for PostgreSQL entrypoint in OCI containers
    dependencies:
      runtime:
        - bash
        - su-exec
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/libexec/${{vars.mangled-package-name}}
          curl https://raw.githubusercontent.com/docker-library/postgres/master/16/alpine"${ALPINE_VERSION}"/docker-entrypoint.sh -o \
            ${{targets.subpkgdir}}/usr/libexec/${{vars.mangled-package-name}}/docker-entrypoint.sh
          curl https://raw.githubusercontent.com/docker-library/postgres/master/16/alpine"${ALPINE_VERSION}"/docker-ensure-initdb.sh -o \
            ${{targets.subpkgdir}}/usr/libexec/${{vars.mangled-package-name}}/docker-ensure-initdb.sh
          sed -i "s|/docker-entrypoint-initdb.d|/var/lib/postgres/initdb|g" ${{targets.subpkgdir}}/usr/libexec/${{vars.mangled-package-name}}/*.sh
          sed -i "s|/usr/local|/usr|g" ${{targets.subpkgdir}}/usr/libexec/${{vars.mangled-package-name}}/*.sh
          chmod +x ${{targets.subpkgdir}}/usr/libexec/${{vars.mangled-package-name}}/*.sh

  - name: ${{package.name}}-oci-entrypoint
    description: Entrypoint for using PostgreSQL in OCI containers
    dependencies:
      provides:
        - postgresql-oci-entrypoint=${{package.full-version}}
      runtime:
        - ${{package.name}}-oci-entrypoint-base
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/bin
          mkdir -p ${{targets.subpkgdir}}/var/lib/postgres/initdb
          ln -s /usr/libexec/${{vars.mangled-package-name}}/docker-entrypoint.sh ${{targets.subpkgdir}}/usr/bin/docker-entrypoint.sh
          ln -s /usr/libexec/${{vars.mangled-package-name}}/docker-entrypoint.sh ${{targets.subpkgdir}}/var/lib/postgres/initdb/docker-entrypoint.sh
          ln -s /usr/libexec/${{vars.mangled-package-name}}/docker-ensure-initdb.sh ${{targets.subpkgdir}}/usr/bin/docker-ensure-initdb.sh
          ln -s /usr/libexec/${{vars.mangled-package-name}}/docker-ensure-initdb.sh ${{targets.subpkgdir}}/var/lib/postgres/initdb/docker-ensure-initdb.sh

  - name: ${{package.name}}-bitnami-compat
    description: "compat package with postgresql image"
    dependencies:
      provides:
        - postgresql-bitnami-compat=${{package.full-version}}
      runtime:
        - ${{package.name}}
        # Required by startup scripts
        - busybox
        - net-tools
        - bash
        - pgaudit-16
    pipeline:
      - uses: bitnami/compat
        with:
          image: postgresql
          version-path: 16/debian-12
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/opt/bitnami/postgresql/conf
          mkdir -p ${{targets.subpkgdir}}/opt/bitnami/postgresql/bin
          mkdir -p ${{targets.subpkgdir}}/opt/bitnami/postgresql/share

          # Copy sample configs used to generate Bitnami config
          cp ${{targets.destdir}}/usr/share/${{vars.mangled-package-name}}/pg_hba.conf.sample ${{targets.subpkgdir}}/opt/bitnami/postgresql/share/pg_hba.conf.sample
          cp ${{targets.destdir}}/usr/share/${{vars.mangled-package-name}}/postgresql.conf.sample ${{targets.subpkgdir}}/opt/bitnami/postgresql/share/postgresql.conf.sample

          # Use package path while unpacking
          find . -iname "*.sh" -exec sed 's#/opt/bitnami#${{targets.subpkgdir}}/opt/bitnami#g' -i {} \;
            ${{targets.subpkgdir}}/opt/bitnami/scripts/postgresql/postunpack.sh || true
          # Restore path
          find ${{targets.subpkgdir}}/opt/bitnami -type f -exec sed 's#${{targets.subpkgdir}}##g' -i {} \;

          # Remove sample configs
          rm ${{targets.subpkgdir}}/opt/bitnami/postgresql/share/*.sample

          # Link binaries used by Bitnami config
          ln -sf /usr/libexec/${{vars.mangled-package-name}}/initdb ${{targets.subpkgdir}}/opt/bitnami/postgresql/bin/initdb
          ln -sf /usr/libexec/${{vars.mangled-package-name}}/pg_ctl ${{targets.subpkgdir}}/opt/bitnami/postgresql/bin/pg_ctl
          ln -sf /usr/libexec/${{vars.mangled-package-name}}/pg_rewind ${{targets.subpkgdir}}/opt/bitnami/postgresql/bin/pg_rewind
          ln -sf /usr/libexec/${{vars.mangled-package-name}}/pg_isready /${{targets.subpkgdir}}/opt/bitnami/postgresql/bin/pg_isready

  # This subpackage should always come last to avoid shipping resources included in other subpackages
  - name: "${{package.name}}-base"
    description: "Base for PostgreSQL 16"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"

          # Move contents of main package to base package
          mv "${{targets.destdir}}"/* "${{targets.subpkgdir}}"

          # Create symlinks to binaries in execdir to bindir in main package
          export bindir="${{targets.destdir}}/usr/bin"
          export execdir="/usr/libexec/${{vars.mangled-package-name}}"

          mkdir -p "${bindir}"

          cd "${{targets.subpkgdir}}/${execdir}"
          for binary in *; do
            ln -sf "${execdir}/${binary}" "${bindir}/${binary}"
          done

update:
  version-separator: _
  enabled: true
  github:
    identifier: postgres/postgres
    strip-prefix: REL_
    tag-filter: REL_16
    use-tag: true

test:
  environment:
    contents:
      packages:
        - ${{package.name}}-client
        - wolfi-base
        - shadow
        - sudo-rs
        - glibc-locales
    environment:
      PGDATA: /tmp/test_db
      PGUSER: wolfi
  pipeline:
    - name: "Test if PostgreSQL binaries are present and runnable"
      runs: |
        command -v initdb
        command -v pg_ctl
        command -v psql
    - name: "Test database creation"
      runs: |
        useradd $PGUSER
        sudo -u $PGUSER initdb -D /tmp/test_db
        sudo -u $PGUSER pg_ctl -D /tmp/test_db -l /tmp/logfile start
        createdb testdb
        psql -lqt | cut -d \| -f 1 | grep -qw testdb
    - name: "Test basic read/write operations"
      runs: |
        psql -d testdb -c "CREATE TABLE test_table (id SERIAL PRIMARY KEY, test_value VARCHAR(50));"
        psql -d testdb -c "INSERT INTO test_table (test_value) VALUES ('Hello, PostgreSQL!');"
        psql -d testdb -t -A -c "SELECT test_value FROM test_table WHERE id=1;"
    - name: "Test server can run and respond to requests"
      runs: |
        psql -d testdb -c "\conninfo"
