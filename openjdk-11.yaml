package:
  name: openjdk-11
  version: 11.0.23 # TODO(jason): on version bump, ensure to update downstream projects that are pinned to a specific prerelease version
  epoch: 1
  description:
  copyright:
    - license: GPL-2.0-only
  dependencies:
    runtime:
      - openjdk-11-jre

environment:
  contents:
    packages:
      - alsa-lib-dev
      - autoconf
      - automake
      - bash
      - build-base
      - busybox
      - ca-certificates-bundle
      - cups-dev
      - file
      - fontconfig-dev
      - freetype-dev
      - giflib-dev
      - lcms2-dev
      - libffi-dev
      - libjpeg-turbo-dev
      - libx11-dev
      - libxext-dev
      - libxi-dev
      - libxrandr-dev
      - libxrender-dev
      - libxt-dev
      - libxtst-dev
      - openjdk-10
      - openjdk-10-default-jvm
      - zip

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/openjdk/jdk11u.git
      tag: jdk-${{package.version}}-ga
      expected-commit: 7a356988b167292b90af5a2b8586c06351519215

  - runs: chmod +x configure

  - uses: autoconf/configure
    with:
      opts: |
        --with-boot-jdk=/usr/lib/jvm/java-10-openjdk \
        --prefix=/usr/lib/jvm/java-11-openjdk \
        --with-vendor-name=wolfi \
        --with-vendor-url=https://wolfi.dev \
        --with-vendor-bug-url=https://github.com/wolfi-dev/os/issues \
        --with-version-opt="wolfi-r${{package.epoch}}" \
        --disable-warnings-as-errors \
        --disable-precompiled-headers \
        --enable-dtrace=no \
        --with-zlib=system \
        --with-debug-level=release \
        --with-native-debug-symbols=internal \
        --with-jvm-variants=server \
        --with-jtreg=no  \
        --with-libpng=system \
        --with-jvm-variants=server \
        --with-libjpeg=system \
        --with-giflib=system \
        --with-lcms=system \
        --with-version-string=""

  - runs: make jdk-image

  #- runs: |
  # NOTE: Disable flakey tests for now as we're seeing builds hang on aarch64
  # # run the gtest unittest suites
  # make test-hotspot-gtest

  - runs: |
      _java_home="usr/lib/jvm/java-11-openjdk"

      mkdir -p "${{targets.destdir}}"/$_java_home
      cp -r build/*-normal-server-release/images/jdk/* "${{targets.destdir}}"/$_java_home
      rm "${{targets.destdir}}"/$_java_home/lib/src.zip

subpackages:
  - name: "openjdk-11-dbg"
    description: "OpenJDK 11 Java Debug Symbols"
    pipeline:
      - uses: split/debug
    dependencies:
      runtime:
        - openjdk-11

  - name: "openjdk-11-jre"
    description: "OpenJDK 11 Java Runtime Environment"
    dependencies:
      runtime:
        - freetype
        - libfontconfig1
        - openjdk-11-jre-base
    pipeline:
      - runs: |
          _java_home="usr/lib/jvm/java-11-openjdk"

          mkdir -p "${{targets.subpkgdir}}"/$_java_home/lib
          mv "${{targets.destdir}}"/$_java_home/lib/libawt_xawt.so \
              "${{targets.destdir}}"/$_java_home/lib/libfontmanager.so \
              "${{targets.destdir}}"/$_java_home/lib/libjavajpeg.so \
              "${{targets.destdir}}"/$_java_home/lib/libjawt.so \
              "${{targets.destdir}}"/$_java_home/lib/libjsound.so \
              "${{targets.destdir}}"/$_java_home/lib/liblcms.so \
              "${{targets.destdir}}"/$_java_home/lib/libsplashscreen.so \
              "${{targets.subpkgdir}}"/$_java_home/lib

  - name: "openjdk-11-jre-base"
    description: "OpenJDK 11 Java Runtime Environment (headless)"
    dependencies:
      runtime:
        - java-common
        - java-cacerts
    pipeline:
      - runs: |
          _java_home="usr/lib/jvm/java-11-openjdk"

          mkdir -p "${{targets.subpkgdir}}"/$_java_home
          mv "${{targets.destdir}}"/$_java_home/lib \
             "${{targets.subpkgdir}}"/$_java_home

          mkdir -p "${{targets.subpkgdir}}"/$_java_home/bin
          for i in java \
                    jfr \
                    jjs \
                    jrunscript \
                    keytool \
                    pack200 \
                    rmid \
                    rmiregistry \
                    unpack200; do
            mv "${{targets.destdir}}"/$_java_home/bin/$i "${{targets.subpkgdir}}"/$_java_home/bin/$i
          done

          [ "${{build.arch}}" = "x86_64" ] && \
            mv "${{targets.destdir}}"/$_java_home/bin/jaotc "${{targets.subpkgdir}}"/$_java_home/bin/jaotc

          mv "${{targets.destdir}}"/$_java_home/legal "${{targets.subpkgdir}}"/$_java_home
          mv "${{targets.destdir}}"/$_java_home/conf "${{targets.subpkgdir}}"/$_java_home
          mv "${{targets.destdir}}"/$_java_home/release "${{targets.subpkgdir}}"/$_java_home
          cp ASSEMBLY_EXCEPTION \
              LICENSE \
              README.md \
             "${{targets.subpkgdir}}"/$_java_home

          # symlink to shared java cacerts store
          rm -f "${{targets.subpkgdir}}"/$_java_home/lib/security/cacerts
          ln -sf /etc/ssl/certs/java/cacerts \
            "${{targets.subpkgdir}}"/$_java_home/lib/security/cacerts

          # symlink for `java-common` to work (which expects jre in $_java_home/jre)
          ln -sf . "${{targets.subpkgdir}}/$_java_home/jre"

  - name: "openjdk-11-jmods"
    description: "OpenJDK 11 jmods"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib/jvm/java-11-openjdk
          mv "${{targets.destdir}}"/usr/lib/jvm/java-11-openjdk/jmods \
             "${{targets.subpkgdir}}"/usr/lib/jvm/java-11-openjdk

  - name: "openjdk-11-doc"
    description: "OpenJDK 11 Documentation"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib/jvm/java-11-openjdk
          mv "${{targets.destdir}}"/usr/lib/jvm/java-11-openjdk/man \
             "${{targets.subpkgdir}}"/usr/lib/jvm/java-11-openjdk

  - name: "openjdk-11-demos"
    description: "OpenJDK 11 Demos"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib/jvm/java-11-openjdk
          mv "${{targets.destdir}}"/usr/lib/jvm/java-11-openjdk/demo \
             "${{targets.subpkgdir}}"/usr/lib/jvm/java-11-openjdk

  - name: "openjdk-11-default-jvm"
    description: "Use the openjdk-11 JVM as the default JVM"
    dependencies:
      runtime:
        - openjdk-11-jre
      provides:
        - default-jvm=1.11
        - default-jvm-lts=1.11
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/lib/jvm
          ln -sf java-11-openjdk "${{targets.subpkgdir}}"/usr/lib/jvm/default-jvm

  - name: "openjdk-11-default-jdk"
    description: "Use the openjdk-11 JVM as the default JVM with the JDK installed"
    dependencies:
      runtime:
        - openjdk-11-default-jvm
        - openjdk-11
      provides:
        - default-jdk=1.11
        - default-jdk-lts=1.11

# OpenJDK versions use an interesting versioning approach.  You can read the Timeline section https://wiki.openjdk.org/display/JDKUpdates/JDK11u
# The OpenJDK repo uses tags for prereleases and GA releases https://github.com/openjdk/jdk11u/tags
# 1. Pre-releases are tagged with a tag like jdk-11.0.11+1
# 2. GA releases are tagged with a tag like jdk-11.0.11-ga
# 3. Patch releases are tagged with a tag like jdk-11.0.11+2
# 4. The jdk-11.0.11-ga tag is updated to point to the new patch release commit
update:
  enabled: true
  shared: true
  github:
    identifier: openjdk/jdk11u
    strip-prefix: jdk-
    strip-suffix: -ga
    tag-filter-contains: -ga
    use-tag: true

test:
  environment:
    contents:
      packages:
        - openjdk-11-default-jdk
        - openjdk-11-jmods
    environment:
      JAVA_HOME: /usr/lib/jvm/java-11-openjdk
  pipeline:
    # Test a basic Hello World
    - working-directory: basic
      runs: |
        javac HelloWorld.java
        java HelloWorld | grep -qi "Hello World!"
    # Test a basic HTTP connection
    - working-directory: basic
      runs: |
        javac RequestTest.java
        java RequestTest | grep -qi "Successfully connected to example.org"
    # Test modules
    - working-directory: advanced/module-project
      runs: |
        mkdir output
        javac -d output --module-source-path modules $(find modules -name "*.java")

        # Create a jar with the compiled classes
        jar --verbose --create --file app.jar \
          --main-class dev.chainguard.module.main.Main \
          --module-version 1.0 \
          -C output/test.modules . \
          -C output/main.app .

        # Test the jar
        java -jar app.jar

        # Test jlink
        jlink --verbose --module-path "app.jar:$JAVA_HOME/jmods" \
          --add-modules test.modules \
          --output test-project-jre

        # Test custom JRE
        test-project-jre/bin/java -jar app.jar
